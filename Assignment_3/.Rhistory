fizzbuzz <- function(number) {
# Check for divisibility by 3 and 5
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
# Determine the output based on divisibility
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
number  # Return the original number if not divisible by 3 or 5
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
# Check for divisibility by 3 and 5
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
# Determine the output based on divisibility
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
print('neither a fizz nor a buzz')
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
print('neither a fizz nor a buzz')
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
number
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
"neither a fizz not a buzz"
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
number, "neither a fizz not a buzz"
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
(number, "neither a fizz not a buzz")
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
number "neither a fizz not a buzz"
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
number + "neither a fizz not a buzz"
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
cat(number , "neither a fizz not a buzz")
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
fizzbuzz <- function(number) {
is_multiple_of_3 <- number %% 3 == 0
is_multiple_of_5 <- number %% 5 == 0
if (is_multiple_of_3 & is_multiple_of_5) {
"fizzbuzz"
} else if (is_multiple_of_3) {
"fizz"
} else if (is_multiple_of_5) {
"buzz"
} else {
"neither a fizz not a buzz"
}
}
# Example usage
numbers <- c(3, 5, 15, 4, 7)
fizzbuzz_results <- sapply(numbers, fizzbuzz)
print(fizzbuzz_results)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(num_stairs) {
# Validate input (positive integer)
if (!is.numeric(num_stairs) || num_stairs <= 0) {
stop("Invalid input: Number of stairs must be a positive integer.")
}
# Outer loop for each stair row
for (i in 1:num_stairs) {
# Inner loop to print spaces and Xs
for (j in 1:i) {
cat("X", sep = "")
}
# Add a newline after each row
cat("\n")
}
}
# Example usage
num_stairs <- 4
marioStairs(num_stairs)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(num_stairs) {
# Validate input (positive integer)
if (!is.numeric(num_stairs) || num_stairs <= 0) {
stop("Invalid input: Number of stairs must be a positive integer.")
}
# Outer loop for each stair row
for (i in 1:num_stairs) {
# Inner loop to print spaces and Xs
for (j in 1:i) {
cat("X", sep = "")
}
# Add a newline after each row
cat("\n")
}
}
# Example usage
num_stairs <- 4
marioStairs(num_stairs)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(num_stairs) {
# Validate input (positive integer)
if (!is.numeric(num_stairs) || num_stairs <= 0) {
stop("Invalid input: Number of stairs must be a positive integer.")
}
# Outer loop for each stair row
for (i in 1:num_stairs) {
# Inner loop to print spaces and Xs
for (j in 1:i) {
cat("X", sep = "")
}
# Add a newline after each row
cat("\n")
}
}
# Example usage
num_stairs <- 6
marioStairs(num_stairs)
# You may feel more comfortable figuring this out in Python first, then translating into R later.
marioStairs <- function(num_stairs) {
if (!is.numeric(num_stairs) || num_stairs <= 0) {
stop("Invalid input: Number of stairs must be a positive integer.")
}
for (i in 1:num_stairs) {
for (j in 1:i) {
cat("X", sep = "")
}
cat("\n")
}
}
# Example usage
num_stairs <- 6
marioStairs(num_stairs)
